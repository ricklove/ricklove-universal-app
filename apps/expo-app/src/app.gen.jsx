// ../../packages/example-a/src/index.ts
var exampleA = `This is A`;

// ../../node_modules/expo-status-bar/build/setStatusBarBackgroundColor.js
import { StatusBar } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarNetworkActivityIndicatorVisible.js
import { StatusBar as StatusBar2 } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarHidden.js
import { StatusBar as StatusBar3 } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarStyle.js
import { StatusBar as StatusBar4 } from "react-native";

// ../../node_modules/expo-status-bar/build/styleToBarStyle.js
import { Appearance } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarTranslucent.js
import { StatusBar as StatusBar5 } from "react-native";

// ../../node_modules/expo-status-bar/build/ExpoStatusBar.js
function ExpoStatusBar(props) {
  return null;
}

// ../../packages/cl/src/index.tsx
import { useState } from "react";
import { Pressable, Text, View } from "react-native";
var ExampleView = () => {
  const [count, setCount] = useState(0);
  const increment = () => {
    setCount((s) => s + 1);
  };
  return <View className="w-full h-full flex-col flex-1 items-center justify-center bg-red-100">
    <Text className="text-cyan-700">{`ExampleView ... ${exampleA} - wait a min, it is retaining state now - cool`}</Text>
    <Pressable onPress={increment}>
      <Text>{`Increment count:${count}`}</Text>
      <Text>003</Text>
    </Pressable>
    <ExpoStatusBar style="auto" />
  </View>;
};

// ../../packages/cl/src/design/tailwind/theme.ts
var tailwindTheme = {
  // edit your tailwind theme here!
  // https://tailwindcss.com/docs/adding-custom-styles
};

// ../../packages/example-app/src/index.tsx
var App = () => {
  return <ExampleView />;
};
export {
  App,
  tailwindTheme
};
//# sourceMappingURL=data:application/json;base64,
