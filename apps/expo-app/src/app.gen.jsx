// ../../packages/cl/src/utils/stable-callback.ts
import { useRef } from "react";
var useStableCallback = (stable) => {
  const ref = useRef(stable);
  ref.current = stable;
  const callback = useRef((...args) => ref.current(...args));
  return callback.current;
};

// ../../packages/pipescript/src/ui/work-canvas-view.tsx
import { useEffect as useEffect2, useRef as useRef3, useState as useState2 } from "react";
import { View as View2, Pressable as Pressable2 } from "react-native";

// ../../packages/pipescript/src/ui/work-flow-view.tsx
import React, { useState } from "react";
import { View, Text } from "react-native";
var getTypeName = (type) => {
  if (type.kind === `simple`) {
    return type.type;
  }
  return JSON.stringify(type);
};
var WorkFlowView = ({
  workflow,
  full
}) => {
  return <View
    className={`flex-column relative border-blue-100 border-solid border-[1px] rounded
            ${full ? `w-[100vw] h-[100vh]` : `min-w-[200px] min-h-[100px]`}`}
  >
    <View className="absolute">{workflow.nodes.map((n) => <React.Fragment key={n.nodeId}><NodeView node={n} container={workflow} /></React.Fragment>)}</View>
    <Text className="text-yellow-400 self-center">{`${workflow.name}`}</Text>
    <View className="flex-row flex-1">
      <View className="flex-col flex-1 justify-center">{workflow.inputs.map((input) => <React.Fragment key={input.name}><Text>{input.name}</Text></React.Fragment>)}</View>
      <View className="flex-col flex-1 justify-center items-end">{workflow.outputs.map((output) => <React.Fragment key={output.name}><View className="p-2 flex-row justify-center">
        {output.pipe && <>{output.pipe.kind === `data` && <Text className="text-purple-400">{output.pipe.json}</Text>}</>}
        <Text className="pr-1">{"\u{1F535}"}</Text>
        <Text className="text-blue-300">{`${output.name}`}</Text>
        <Text className="text-white">:</Text>
        <Text className="pl-1 text-green-800">{`${getTypeName(
          output.type
        )}`}</Text>
      </View></React.Fragment>)}</View>
    </View>
    <Text className="text-yellow-400 self-center">{`${workflow.workflowUri}`}</Text>
    {
      /* {workflow.workflows?.map(w => (
          <React.Fragment key={w.name}>
              <View className='absolute left-0 top-0 scale-50'>
                  <WorkFlowView workflow={w} />
              </View>
          </React.Fragment>
      ))} */
    }
  </View>;
};
var NodeView = ({ node, container }) => {
  const [layout, setLayout] = useState(node.layout ?? { position: { x: 0, y: 0 } });
  const workflow = (() => {
    if (node.implementation.kind === `workflow`) {
      const imp = node.implementation;
      return container.workflows?.find((w) => w.workflowUri === imp.workflowUri);
    }
  })();
  return <View
    className="p-2 flex-column border-blue-100 border-solid border-[1px] rounded"
    style={{
      transform: `translate(${layout.position.x}px, ${layout.position.y}px)`
    }}
  >
    <View className="flex-row justify-center">
      {workflow && <Text className="text-yellow-400 self-center">{workflow.name}</Text>}
      <Text className="pl-2 text-yellow-400 self-center">
        {"#"}
        {node.nodeId}
      </Text>
    </View>
    {workflow && <View className="flex-row flex-1">
      <View className="flex-col justify-center">{workflow.inputs.map((input) => <React.Fragment key={input.name}><Text>{input.name}</Text></React.Fragment>)}</View>
      <View className="flex-1 relative"><WorkFlowView workflow={workflow} /></View>
      <View className="flex-col justify-center items-end">{workflow.outputs.map((output) => <React.Fragment key={output.name}><View className="p-2 flex-row justify-center relative">
        <Text className="text-blue-300">{`${output.name}`}</Text>
        <Text className="text-white">:</Text>
        <Text className="pl-1 text-green-800">{`${getTypeName(
          output.type
        )}`}</Text>
        <Text className="absolute right-[-18px]">{"\u{1F535}"}</Text>
      </View></React.Fragment>)}</View>
    </View>}
    {
      /* <Text className='text-yellow-400 self-center'>{node.implementation.}</Text> */
    }
  </View>;
};

// ../../packages/pipescript/src/ui/work-canvas-view.tsx
var WorkCanvasView = ({ workflow }) => {
  const [position, setPosition] = useState2({
    x: 0,
    y: 0,
    scale: 1,
    isDragging: false,
    xDragStart: void 0,
    yDragStart: void 0,
    xPointerDragStart: void 0,
    yPointerDragStart: void 0
  });
  const startDrag = useStableCallback((e) => {
    const xPointer = e.clientX ?? 0;
    const yPointer = e.clientY ?? 0;
    console.log(`startDrag`, { xPointer, yPointer, e, position });
    hostRef.current?.setPointerCapture(e.pointerId ?? 0);
    setPosition((s) => ({
      ...s,
      isDragging: true,
      xDragStart: s.x,
      yDragStart: s.y,
      xPointerDragStart: xPointer,
      yPointerDragStart: yPointer
    }));
  });
  const endDrag = useStableCallback((e) => {
    if (!position.isDragging || !position.xPointerDragStart) {
      return;
    }
    const xPointer = e.clientX ?? 0;
    const yPointer = e.clientY ?? 0;
    console.log(`endDrag`, { xPointer, yPointer, e, position });
    hostRef.current?.releasePointerCapture(e.pointerId ?? 0);
    setPosition((s) => ({
      ...s,
      x: (s.xDragStart ?? 0) + xPointer - (s.xPointerDragStart ?? 0),
      y: (s.yDragStart ?? 0) + yPointer - (s.yPointerDragStart ?? 0),
      isDragging: false,
      xPointerDragStart: void 0,
      yPointerDragStart: void 0
    }));
  });
  const moveDrag = useStableCallback((e) => {
    if (!position.isDragging || !position.xPointerDragStart) {
      return;
    }
    const xPointer = e.clientX ?? 0;
    const yPointer = e.clientY ?? 0;
    console.log(`moveDrag`, { xPointer, yPointer, e, position });
    setPosition((s) => ({
      ...s,
      x: (s.xDragStart ?? 0) + xPointer - (s.xPointerDragStart ?? 0),
      y: (s.yDragStart ?? 0) + yPointer - (s.yPointerDragStart ?? 0)
    }));
  });
  const scrollWheel = useStableCallback((e) => {
    console.log(`onwheel`, { e, position });
    setPosition((s) => ({
      ...s,
      scale: s.scale * Math.pow(0.9, e.deltaY > 0 ? 1 : -1)
    }));
  });
  const hostRef = useRef3(null);
  useEffect2(() => {
    const host = hostRef.current;
    if (!host) {
      return;
    }
    console.log(`host`, { host });
    host.onwheel = scrollWheel;
    return () => {
      host.onwheel = void 0;
    };
  }, [!hostRef.current]);
  console.log(`translate(${position.x}, ${position.y})`);
  return <View2 className="w-full h-full relative overflow-hidden"><Pressable2
    ref={hostRef}
    className="w-full h-full absolute overflow-hidden bg-gray-800 block"
    onPointerDown={(e) => startDrag(e)}
    onPointerUp={(e) => endDrag(e)}
    onPointerMove={(e) => moveDrag(e)}
  ><View2
    style={{
      transform: `translate(${position.x}px, ${position.y}px) scale(${position.scale})`
    }}
  ><View2 className=""><WorkFlowView workflow={workflow} full /></View2></View2></Pressable2></View2>;
};

// ../../packages/pipescript/src/data/assignments-0001.ts
var name = `answer`;
var value = 42;
var nodeId = 1;
var exampleDeclarationWorkflow = {
  workflowUri: `file.ts`,
  name: `file.ts`,
  inputs: [],
  outputs: [
    {
      name: `answer`,
      type: {
        kind: `simple`,
        type: `int`
      },
      pipe: {
        kind: `node`,
        sourceNodeId: `1`,
        sourceNodeOutputName: `answer`
      }
    }
  ],
  workflows: [
    {
      workflowUri: `${name}-declaration`,
      name: `${name}-declaration`,
      inputs: [],
      outputs: [
        {
          name,
          type: {
            kind: `simple`,
            type: `int`
          },
          pipe: {
            kind: `data`,
            json: JSON.stringify(value)
          }
        }
      ],
      nodes: []
    }
  ],
  nodes: [
    {
      nodeId: `${nodeId}`,
      implementation: {
        kind: `workflow`,
        workflowUri: `${name}-declaration`
      },
      inputPipes: []
    }
  ]
};

// ../../packages/app/src/index.tsx
var App = () => {
  return <WorkCanvasView workflow={exampleDeclarationWorkflow} />;
};

// ../../node_modules/expo-status-bar/build/setStatusBarBackgroundColor.js
import { StatusBar } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarNetworkActivityIndicatorVisible.js
import { StatusBar as StatusBar2 } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarHidden.js
import { StatusBar as StatusBar3 } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarStyle.js
import { StatusBar as StatusBar4 } from "react-native";

// ../../node_modules/expo-status-bar/build/styleToBarStyle.js
import { Appearance } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarTranslucent.js
import { StatusBar as StatusBar5 } from "react-native";

// ../../packages/cl/src/index.tsx
import { useState as useState3 } from "react";
import { Pressable as Pressable3, Text as Text3, View as View3 } from "react-native";

// ../../packages/cl/src/design/tailwind/theme.ts
var tailwindTheme = {
  // edit your tailwind theme here!
  // https://tailwindcss.com/docs/adding-custom-styles
};
export {
  App,
  tailwindTheme
};
//# sourceMappingURL=data:application/json;base64,
