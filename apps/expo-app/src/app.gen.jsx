// ../../packages/cl/src/utils/stable-callback.ts
import { useRef } from "react";
var useStableCallback = (stable) => {
  const ref = useRef(stable);
  ref.current = stable;
  const callback = useRef((...args) => ref.current(...args));
  return callback.current;
};

// ../../packages/pipescript/src/ui/workflow.tsx
import { useEffect, useRef as useRef2, useState } from "react";
import { View, Text, Pressable } from "react-native";
var WorkflowView = ({ workflow }) => {
  const [position, setPosition] = useState({
    x: 0,
    y: 0,
    scale: 1,
    isDragging: false,
    xDragStart: void 0,
    yDragStart: void 0,
    xPointerDragStart: void 0,
    yPointerDragStart: void 0
  });
  const startDrag = useStableCallback((e) => {
    const xPointer = e.clientX ?? 0;
    const yPointer = e.clientY ?? 0;
    console.log(`startDrag`, { xPointer, yPointer, e, position });
    hostRef.current?.setPointerCapture(e.pointerId ?? 0);
    setPosition((s) => ({
      ...s,
      isDragging: true,
      xDragStart: s.x,
      yDragStart: s.y,
      xPointerDragStart: xPointer,
      yPointerDragStart: yPointer
    }));
  });
  const endDrag = useStableCallback((e) => {
    if (!position.isDragging || !position.xPointerDragStart) {
      return;
    }
    const xPointer = e.clientX ?? 0;
    const yPointer = e.clientY ?? 0;
    console.log(`endDrag`, { xPointer, yPointer, e, position });
    hostRef.current?.releasePointerCapture(e.pointerId ?? 0);
    setPosition((s) => ({
      ...s,
      x: (s.xDragStart ?? 0) + xPointer - (s.xPointerDragStart ?? 0),
      y: (s.yDragStart ?? 0) + yPointer - (s.yPointerDragStart ?? 0),
      isDragging: false,
      xPointerDragStart: void 0,
      yPointerDragStart: void 0
    }));
  });
  const moveDrag = useStableCallback((e) => {
    if (!position.isDragging || !position.xPointerDragStart) {
      return;
    }
    const xPointer = e.clientX ?? 0;
    const yPointer = e.clientY ?? 0;
    console.log(`moveDrag`, { xPointer, yPointer, e, position });
    setPosition((s) => ({
      ...s,
      x: (s.xDragStart ?? 0) + xPointer - (s.xPointerDragStart ?? 0),
      y: (s.yDragStart ?? 0) + yPointer - (s.yPointerDragStart ?? 0)
    }));
  });
  const scrollWheel = useStableCallback((e) => {
    console.log(`onwheel`, { e, position });
    setPosition((s) => ({
      ...s,
      scale: s.scale * Math.pow(0.9, e.deltaY > 0 ? 1 : -1)
    }));
  });
  const hostRef = useRef2(null);
  useEffect(() => {
    const host = hostRef.current;
    if (!host) {
      return;
    }
    console.log(`host`, { host });
    host.onwheel = scrollWheel;
    return () => {
      host.onwheel = void 0;
    };
  }, [!hostRef.current]);
  console.log(`translate(${position.x}, ${position.y})`);
  return <View className="w-full h-full relative overflow-hidden"><Pressable
    ref={hostRef}
    className="w-full h-full absolute overflow-hidden bg-gray-800 block"
    onPointerDown={(e) => startDrag(e)}
    onPointerUp={(e) => endDrag(e)}
    onPointerMove={(e) => moveDrag(e)}
  ><View
    className="bg-gray-600"
    style={{
      transform: `translate(${position.x}px, ${position.y}px) scale(${position.scale})`
    }}
  ><Text>test</Text></View></Pressable></View>;
};

// ../../packages/pipescript/src/data/assignments-0001.ts
var name = `answer`;
var value = 42;
var nodeId = 1;
var exampleDeclarationWorkflow = {
  workflowUri: `file.ts`,
  name: `file.ts`,
  inputs: [],
  outputs: [
    {
      name: `answer`,
      type: {
        kind: `simple`,
        type: `int`
      },
      pipe: {
        kind: `node`,
        sourceNodeId: `1`,
        sourceNodeOutputName: `answer`
      }
    }
  ],
  workflows: [
    {
      workflowUri: `${name}-declaration`,
      name: `${name}-declaration`,
      inputs: [],
      outputs: [
        {
          name,
          type: {
            kind: `simple`,
            type: `int`
          },
          pipe: {
            kind: `data`,
            json: JSON.stringify(value)
          }
        }
      ],
      nodes: []
    }
  ],
  nodes: [
    {
      nodeId: `${nodeId}`,
      implementation: {
        kind: `workflow`,
        workflowUri: `${name}-declaration`
      },
      inputPipes: []
    }
  ]
};

// ../../packages/app/src/index.tsx
var App = () => {
  return <WorkflowView workflow={exampleDeclarationWorkflow} />;
};

// ../../node_modules/expo-status-bar/build/setStatusBarBackgroundColor.js
import { StatusBar } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarNetworkActivityIndicatorVisible.js
import { StatusBar as StatusBar2 } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarHidden.js
import { StatusBar as StatusBar3 } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarStyle.js
import { StatusBar as StatusBar4 } from "react-native";

// ../../node_modules/expo-status-bar/build/styleToBarStyle.js
import { Appearance } from "react-native";

// ../../node_modules/expo-status-bar/build/setStatusBarTranslucent.js
import { StatusBar as StatusBar5 } from "react-native";

// ../../packages/cl/src/index.tsx
import { useState as useState2 } from "react";
import { Pressable as Pressable2, Text as Text2, View as View2 } from "react-native";

// ../../packages/cl/src/design/tailwind/theme.ts
var tailwindTheme = {
  // edit your tailwind theme here!
  // https://tailwindcss.com/docs/adding-custom-styles
};
export {
  App,
  tailwindTheme
};
//# sourceMappingURL=data:application/json;base64,
